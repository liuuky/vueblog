(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{330:function(t,v,_){"use strict";_.r(v);var a=_(2),e=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"restful"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#restful"}},[t._v("#")]),t._v(" RESTful")]),t._v(" "),_("p",[t._v("REST (Representational State Transfer)，中文意思是：表述性状态转移。 一组架构约束条件和原则，如果一个架构符合 REST 的约束条件和原则，我们就称它为 RESTful 架构。")]),t._v(" "),_("p",[t._v("RESTful基本概念")]),t._v(" "),_("ul",[_("li",[t._v("在 REST 中，一切的内容都被认为是一种资源")]),t._v(" "),_("li",[t._v("每个资源都由 URI 唯一标识")]),t._v(" "),_("li",[t._v("使用统一的接口处理资源请求（POST/GET/PUT/DELETE/HEAD）")]),t._v(" "),_("li",[t._v("无状态（每次请求之前是无关联，没有 session ）")])]),t._v(" "),_("h2",{attrs:{id:"理解restful"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#理解restful"}},[t._v("#")]),t._v(" 理解RESTful")]),t._v(" "),_("p",[t._v("下面我们结合REST原则，围绕资源展开讨论，从资源的定义、获取、表述、关联、状态变迁等角度，列举一些关键概念并加以解释。")]),t._v(" "),_("ul",[_("li",[t._v("资源与URI")]),t._v(" "),_("li",[t._v("统一资源接口")]),t._v(" "),_("li",[t._v("资源的表述")]),t._v(" "),_("li",[t._v("资源的链接")]),t._v(" "),_("li",[t._v("状态的转移")])]),t._v(" "),_("h3",{attrs:{id:"资源和uri"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#资源和uri"}},[t._v("#")]),t._v(" 资源和URI")]),t._v(" "),_("ul",[_("li",[t._v("使用 "),_("code",[t._v("/")]),t._v(" 来表示资源的层级关系")]),t._v(" "),_("li",[t._v("使用 "),_("code",[t._v("?")]),t._v(" 用来过滤资源")]),t._v(" "),_("li",[t._v("使用 "),_("code",[t._v("_")]),t._v(" 或者 "),_("code",[t._v("-")]),t._v(" 让URI的可读性更好")]),t._v(" "),_("li",[_("code",[t._v(",")]),t._v(" 或 "),_("code",[t._v(";")]),t._v(" 可以用来表示同级资源的关系")])]),t._v(" "),_("h3",{attrs:{id:"统一资源接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#统一资源接口"}},[t._v("#")]),t._v(" 统一资源接口")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("请求方法")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("GET")]),t._v(" "),_("td",[t._v("获取某个资源。 幂等（取多少次结果都没有变化）")])]),t._v(" "),_("tr",[_("td",[t._v("POST")]),t._v(" "),_("td",[t._v("创建一个新的资源")])]),t._v(" "),_("tr",[_("td",[t._v("PUT")]),t._v(" "),_("td",[t._v("替换某个已有的资源（更新操作） ， 幂等（更新多次只保存一个结果）")])]),t._v(" "),_("tr",[_("td",[t._v("DELETE")]),t._v(" "),_("td",[t._v("删除某个资源")])]),t._v(" "),_("tr",[_("td",[t._v("HEAD")]),t._v(" "),_("td",[t._v("主要用于确认 URL 的有效性以及资源更新的日期时间等")])]),t._v(" "),_("tr",[_("td",[t._v("PATCH")]),t._v(" "),_("td",[t._v("新引入的，对PUT方法的补充，用来对已知资源进行局部更新")])])])]),t._v(" "),_("h3",{attrs:{id:"资源表述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#资源表述"}},[t._v("#")]),t._v(" 资源表述")]),t._v(" "),_("p",[t._v("客户端获取的只是资源的表述而已。资源在外界的具体呈现，可以有多种表述(或成为表现、表示)形式，在客户端和服务端之间传送的也是资源的表述，而不是资源本身。文本资源可以采用 html、xml、json 等格式，图片可以使用 PNG 或 JPG 展现出来。")]),t._v(" "),_("p",[t._v("资源的表述包括数据和描述数据的元数据，例如，HTTP 头 “Content-Type” 就是这样一个元数据属性。")]),t._v(" "),_("p",[t._v("那么客户端如何知道服务端提供哪种表述形式呢？")]),t._v(" "),_("p",[t._v("答案是可以通过 HTTP 内容协商，客户端可以通过 Accept 头请求一种特定格式的表述，服务端则通过 Content-Type 告诉客户端资源的表述形式。")]),t._v(" "),_("p",[t._v("MIME 类型")]),t._v(" "),_("p",[t._v("accept: text/xml html文件")]),t._v(" "),_("p",[t._v("Content-Type告诉客户端资源的表述形式")]),t._v(" "),_("h3",{attrs:{id:"资源的链接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#资源的链接"}},[t._v("#")]),t._v(" 资源的链接")]),t._v(" "),_("p",[t._v("超媒体即应用状态引擎（可以做多层链接）")]),t._v(" "),_("p",[t._v("https://api.github.com/repos/github")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('{\n  "message": "Not Found",\n  "documentation_url": "https://developer.github.com/v3"\n}\n')])])]),_("h3",{attrs:{id:"状态转移"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#状态转移"}},[t._v("#")]),t._v(" 状态转移")]),t._v(" "),_("p",[t._v("服务器端不应该保存客户端状态。")]),t._v(" "),_("p",[t._v("应用状态 -> 服务器端不保存应用状态")]),t._v(" "),_("p",[t._v("访问订单 根据接口去查询")]),t._v(" "),_("p",[t._v("访问商品 查询")])])}),[],!1,null,null,null);v.default=e.exports}}]);
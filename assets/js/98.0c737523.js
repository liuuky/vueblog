(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{351:function(t,e,r){"use strict";r.r(e);var v=r(2),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"全局内置对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#全局内置对象"}},[t._v("#")]),t._v(" 全局内置对象")]),t._v(" "),r("h3",{attrs:{id:"js中有那些内置对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js中有那些内置对象"}},[t._v("#")]),t._v(" JS中有那些内置对象")]),t._v(" "),r("ul",[r("li",[t._v("数据封装类对象\n"),r("ul",[r("li",[t._v("String、Array、Object、Boolean、Number")])])]),t._v(" "),r("li",[t._v("其他对象\n"),r("ul",[r("li",[t._v("Math、Date、RegExp、Error、Function、Arguments")])])]),t._v(" "),r("li",[t._v("ES6 新增对象\n"),r("ul",[r("li",[t._v("Promise、Map、Set、Symbol、Proxy、Reflect")])])])]),t._v(" "),r("h3",{attrs:{id:"数组array对象常用方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组array对象常用方法"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("数组Array对象常用方法"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("修改器方法\n下面的这些方法会"),r("strong",[t._v("改变调用它们的对象自身的值")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Array.prototype.pop()")]),t._v(" "),r("ul",[r("li",[t._v("删除数组的最后一个元素，并返回这个元素。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.push()")]),t._v(" "),r("ul",[r("li",[t._v("在数组的末尾增加一个或多个元素，并返回数组的新长度。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.shift()")]),t._v(" "),r("ul",[r("li",[t._v("删除数组的第一个元素，并返回这个元素。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.unshift()")]),t._v(" "),r("ul",[r("li",[t._v("在数组的开头增加一个或多个元素，并返回数组的新长度。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.splice()")]),t._v(" "),r("ul",[r("li",[t._v("在任意的位置给数组添加或删除任意个元素。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.reverse()")]),t._v(" "),r("ul",[r("li",[t._v("颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.sort()")]),t._v(" "),r("ul",[r("li",[t._v("对数组元素进行排序，并返回当前数组。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.fill()")]),t._v(" "),r("ul",[r("li",[t._v("将数组中指定区间的所有元素的值，都替换成某个固定的值。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.copyWithin()")]),t._v(" "),r("ul",[r("li",[t._v("在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。")])])])]),t._v(" "),r("p",[t._v("访问方法\n下面的这些方法绝对不会改变调用它们的对象的值，只会返回一个新的数组或者返回一个其它的期望值。")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Array.prototype.join()")]),t._v(" "),r("ul",[r("li",[t._v("连接所有数组元素组成一个字符串。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.slice()")]),t._v(" "),r("ul",[r("li",[t._v("抽取当前数组中的一段元素组合成一个新数组。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.concat()")]),t._v(" "),r("ul",[r("li",[t._v("返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.includes()")]),t._v(" "),r("ul",[r("li",[t._v("判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.indexOf()")]),t._v(" "),r("ul",[r("li",[t._v("返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.lastIndexOf()")]),t._v(" "),r("ul",[r("li",[t._v("返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.toSource()")]),t._v(" "),r("ul",[r("li",[t._v("返回一个表示当前数组字面量的字符串。遮蔽了原型链上的 Object.prototype.toSource() 方法。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.toString()")]),t._v(" "),r("ul",[r("li",[t._v("返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 Object.prototype.toString() 方法。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.toLocaleString()")]),t._v(" "),r("ul",[r("li",[t._v("返回一个由所有数组元素组合而成的本地化后的字符串。遮蔽了原型链上的 Object.prototype.toLocaleString() 方法。")])])])]),t._v(" "),r("p",[t._v("迭代方法")]),t._v(" "),r("p",[t._v("在下面的众多遍历方法中，有很多方法都需要指定一个回调函数作为参数。在每一个数组元素都分别执行完回调函数之前，数组的length属性会被缓存在某个地方，所以，如果你在回调函数中为当前数组添加了新的元素，那么那些新添加的元素是不会被遍历到的。此外，如果在回调函数中对当前数组进行了其它修改，比如改变某个元素的值或者删掉某个元素，那么随后的遍历操作可能会受到未预期的影响。总之，不要尝试在遍历过程中对原数组进行任何修改，虽然规范对这样的操作进行了详细的定义，但为了可读性和可维护性，请不要这样做。")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Array.prototype.forEach()")]),t._v(" "),r("ul",[r("li",[t._v("为数组中的每个元素执行一次回调函数。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.map()")]),t._v(" "),r("ul",[r("li",[t._v("返回一个由回调函数的返回值组成的新数组。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.reduce()")]),t._v(" "),r("ul",[r("li",[t._v("从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.filter()")]),t._v(" "),r("ul",[r("li",[t._v("将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.every()")]),t._v(" "),r("ul",[r("li",[t._v("如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.some()")]),t._v(" "),r("ul",[r("li",[t._v("如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.find()")]),t._v(" "),r("ul",[r("li",[t._v("找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.findIndex()")]),t._v(" "),r("ul",[r("li",[t._v("找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.keys()")]),t._v(" "),r("ul",[r("li",[t._v("返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。")])])]),t._v(" "),r("li",[r("p",[t._v("Array.prototype.entries()")]),t._v(" "),r("ul",[r("li",[t._v("返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。")])])])]),t._v(" "),r("h3",{attrs:{id:"字符串常用api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串常用api"}},[t._v("#")]),t._v(" ### "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符串常用API"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[r("p",[t._v("String.prototype.split()")]),t._v(" "),r("ul",[r("li",[t._v("通过分离字符串成字串，将字符串对象分割成字符串数组。")])])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.slice(start, end)")]),t._v(" "),r("ul",[r("li",[t._v("摘取一个字符串区域，返回一个新的字符串。")])])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.substr(start, len)")]),t._v(" "),r("ul",[r("li",[t._v("通过指定字符数返回在指定位置开始的字符串中的字符。")])])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.substring()")]),t._v(" "),r("ul",[r("li",[t._v("返回在字符串中指定两个下标之间的字符。")])])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.trim()")]),t._v(" "),r("ul",[r("li",[t._v("从字符串的开始和结尾去除空格")])])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.concat()")]),t._v(" "),r("ul",[r("li",[t._v("连接两个字符串文本，并返回一个新的字符串。")])])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.match()")]),t._v(" "),r("ul",[r("li",[t._v("使用正则表达式与字符串相比较。")])])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.replace()")]),t._v(" "),r("ul",[r("li",[t._v("被用来在正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。")])])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.search()")]),t._v(" "),r("ul",[r("li",[t._v("对正则表达式和指定字符串进行匹配搜索，返回第一个出现的匹配项的下标。")])])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.toString()")]),t._v(" "),r("ul",[r("li",[t._v("返回用字符串表示的特定对象。重写 Object.prototype.toString 方法。")])])])]),t._v(" "),r("h3",{attrs:{id:"set、map、weakset-和-weakmap-的区别？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#set、map、weakset-和-weakmap-的区别？"}},[t._v("#")]),t._v(" Set、Map、WeakSet 和 WeakMap 的区别？")]),t._v(" "),r("h4",{attrs:{id:"set"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/set-map#Set",target:"_blank",rel:"noopener noreferrer"}},[t._v("Set"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("表示有没有，成员的值都是唯一的，没有重复的值")]),t._v(" "),r("li",[t._v("可以接受一个数组（或可迭代的数据结构）作为参数")]),t._v(" "),r("li",[t._v("注：两个对象总是不相等的")])]),t._v(" "),r("p",[t._v("属性：")]),t._v(" "),r("ul",[r("li",[t._v("Set.prototype.constructor：构造函数，默认就是Set函数。")]),t._v(" "),r("li",[t._v("Set.prototype.size：返回Set实例的成员总数。")])]),t._v(" "),r("p",[t._v("方法：")]),t._v(" "),r("ul",[r("li",[t._v("add(value)：添加某个值，返回 Set 结构本身。\n"),r("ul",[r("li",[r("code",[t._v("s.add(1).add(2).add(2)")]),t._v(";")])])]),t._v(" "),r("li",[t._v("delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。")]),t._v(" "),r("li",[t._v("has(value)：返回一个布尔值，表示该值是否为Set的成员。")]),t._v(" "),r("li",[t._v("clear()：清除所有成员，没有返回值。")])]),t._v(" "),r("p",[t._v("遍历方法")]),t._v(" "),r("ul",[r("li",[t._v("keys()：返回键名的遍历器")]),t._v(" "),r("li",[t._v("values()：返回键值的遍历器")]),t._v(" "),r("li",[t._v("entries()：返回键值对的遍历器")]),t._v(" "),r("li",[t._v("forEach()：使用回调函数遍历每个成员")])]),t._v(" "),r("h4",{attrs:{id:"weakset"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#weakset"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/set-map#WeakSet",target:"_blank",rel:"noopener noreferrer"}},[t._v("WeakSet"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("WeakSet 结构与 Set 类似，也是不重复的值的集合。但与 Set 有几个区别：")]),t._v(" "),r("ul",[r("li",[t._v("WeakSet 的成员"),r("strong",[t._v("只能是对象")]),t._v("，而不能是其他类型的值")]),t._v(" "),r("li",[t._v("WeakSet 中的对象都是弱引用\n"),r("ul",[r("li",[t._v("如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存")]),t._v(" "),r("li",[t._v("垃圾回收机制依赖引用计数，如果一个值的引用次数不为0，垃圾回收机制就不会释放这块内存。结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。WeakSet 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，WeakSet 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 WeakSet 里面的引用就会自动消失。")])])]),t._v(" "),r("li",[t._v("WeakSet 不可遍历\n"),r("ul",[r("li",[t._v("由于 WeakSet 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的")])])]),t._v(" "),r("li",[t._v("WeakSet 结构中没有clear方法。")])]),t._v(" "),r("h4",{attrs:{id:"map"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/set-map#Map",target:"_blank",rel:"noopener noreferrer"}},[t._v("Map"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，"),r("strong",[t._v("各种类型的值（包括对象）都可以当作Map的键")]),t._v("。")]),t._v(" "),r("p",[t._v("遍历方法\nMap 结构原生提供三个遍历器生成函数和一个遍历方法。")]),t._v(" "),r("ul",[r("li",[t._v("keys()：返回键名的遍历器。")]),t._v(" "),r("li",[t._v("values()：返回键值的遍历器。")]),t._v(" "),r("li",[t._v("entries()：返回所有成员的遍历器。")]),t._v(" "),r("li",[t._v("forEach()：遍历 Map 的所有成员。")])]),t._v(" "),r("h4",{attrs:{id:"weakmap"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#weakmap"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/set-map#WeakMap",target:"_blank",rel:"noopener noreferrer"}},[t._v("WeakMap"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("WeakMap的设计目的在于: 有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用，而一旦不再需要这两个对象，我们就必须手动删除这个引用，否则垃圾回收机制就不会释放被引用对象占用的内存。")]),t._v(" "),r("p",[t._v("基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。")]),t._v(" "),r("p",[t._v("一个典型应用"),r("strong",[t._v("场景")]),t._v("是，在网页的 DOM 元素上添加数据，就可以使用WeakMap结构。当该 DOM 元素被清除，其所对应的WeakMap记录就会自动被移除。")])])}),[],!1,null,null,null);e.default=_.exports}}]);